var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
//--> Importing Parent Class
var _view = require("./view");
var _viewDefault = parcelHelpers.interopDefault(_view);
//--> Importing Dependencies
var _runtime = require("regenerator-runtime/runtime");
var _stable = require("core-js/stable");
var _fractional = require("fractional");
//--> Importing Assets
var _iconsSvg = require("url:../../img/icons.svg");
var _iconsSvgDefault = parcelHelpers.interopDefault(_iconsSvg);
//--> Starting Coding <--\\
class RecipeView extends _viewDefault.default {
    _parentEl = document.querySelector('.recipe');
    _errorMessage = 'Something went wrong. We could not find this recipe. Please try another one!';
    _message = '';
    addHandlerRender(handler) {
        [
            'hashchange',
            'load'
        ].forEach((ev)=>window.addEventListener(ev, handler)
        );
    }
    addHandlerUpdateServing(handler) {
        this._parentEl.addEventListener('click', function(e) {
            const btn = e.target.closest('.btn--update-servings');
            if (!btn) return;
            const updateTo = +btn.dataset.updateTo;
            if (updateTo > 0) handler(updateTo);
        });
    }
    addHandlerAddBookmark(handler) {
        this._parentEl.addEventListener('click', function(e) {
            const btn = e.target.closest('.btn--bookmark');
            if (!btn) return;
            handler();
        });
    }
    _generateMarkup() {
        return `\n        <figure class="recipe__fig">\n            <img src="${this._data.image}" alt="Tomato" class="recipe__img" />\n            <h1 class="recipe__title">\n              <span>${this._data.title}</span>\n            </h1>\n          </figure>\n\n          <div class="recipe__details">\n            <div class="recipe__info">\n              <svg class="recipe__info-icon">\n                <use href="${_iconsSvgDefault.default}#icon-clock"></use>\n              </svg>\n              <span class="recipe__info-data recipe__info-data--minutes">${this._data.cookingTime}</span>\n              <span class="recipe__info-text">minutes</span>\n            </div>\n            <div class="recipe__info">\n              <svg class="recipe__info-icon">\n                <use href="${_iconsSvgDefault.default}#icon-users"></use>\n              </svg>\n              <span class="recipe__info-data recipe__info-data--people">${this._data.servings}</span>\n              <span class="recipe__info-text">servings</span>\n\n              <div class="recipe__info-buttons">\n                <button class="btn--tiny btn--update-servings" data-update-to="${this._data.servings - 1}">\n                  <svg>\n                    <use href="${_iconsSvgDefault.default}#icon-minus-circle" </use>\n                  </svg>\n                </button>\n                <button class="btn--tiny btn--update-servings" data-update-to="${this._data.servings + 1}">\n                  <svg>\n                    <use href="${_iconsSvgDefault.default}#icon-plus-circle" ></use>\n                  </svg>\n                </button>\n              </div>\n            </div>\n\n            <div class="recipe__user-generated">\n              <svg>\n                <use href="${_iconsSvgDefault.default}#icon-user"></use>\n              </svg>\n            </div>\n            <button class="btn--round btn--bookmark">\n              <svg class="">\n                <use href="${_iconsSvgDefault.default}#icon-bookmark${this._data.bookmarked ? '-fill' : ''}"></use>\n              </svg>\n            </button>\n          </div>\n\n          <div class="recipe__ingredients">\n            <h2 class="heading--2">Recipe ingredients</h2>\n            <ul class="recipe__ingredient-list">\n            ${this._data.ingredients.map((ing)=>{
            return `\n                <li class="recipe__ingredient">\n                <svg class="recipe__icon">\n                  <use href="${_iconsSvgDefault.default}#icon-check"></use>\n                </svg>\n                <div class="recipe__quantity">${ing.quantity ? new _fractional.Fraction(ing.quantity).toString() : ''}</div>\n                <div class="recipe__description">\n                  <span class="recipe__unit">${ing.unit}</span>\n                  ${ing.description}\n                </div>\n              </li>\n              `;
        }).join('')}\n            </ul>\n          </div>\n\n          <div class="recipe__directions">\n            <h2 class="heading--2">How to cook it</h2>\n            <p class="recipe__directions-text">\n              This recipe was carefully designed and tested by\n              <span class="recipe__publisher">${this._data.publisher}</span>. Please check out\n              directions at their website.\n            </p>\n            <a\n              class="btn--small recipe__btn"\n              hthis._data.recipe.url"\n              target="_blank"\n            >\n              <span>Directions</span>\n              <svg class="search__icon">\n                <use href="${_iconsSvgDefault.default}#icon-arrow-right"></use>\n              </svg>\n            </a>\n          </div>\n      `;
    }
}
exports.default = new RecipeView();
