var parcelHelpers = require("@parcel/transformer-js/src/esmodule-helpers.js");
parcelHelpers.defineInteropFlag(exports);
parcelHelpers.export(exports, "state", ()=>state
);
parcelHelpers.export(exports, "loadRecipe", ()=>loadRecipe
);
parcelHelpers.export(exports, "loadSearchResult", ()=>loadSearchResult
);
parcelHelpers.export(exports, "getSearchResultsPage", ()=>getSearchResultsPage
);
parcelHelpers.export(exports, "updateServings", ()=>updateServings
);
parcelHelpers.export(exports, "addBookmark", ()=>addBookmark
);
parcelHelpers.export(exports, "removeBookmark", ()=>removeBookmark
);
//--> Importing Dependencies
var _runtime = require("regenerator-runtime/runtime");
var _stable = require("core-js/stable");
//--> Importing Modules
var _config = require("./config");
var _helper = require("./helper");
//--> Importing HTML Elements
const recipeContainer = document.querySelector('.recipe');
const state = {
    recipe: {
    },
    search: {
        query: '',
        results: [],
        resultsPerPage: _config.RESULTS_PER_PAGE,
        resultsPage: 1
    },
    bookmarks: []
};
const loadRecipe = async function(id) {
    try {
        const data = await _helper.fetchData(`${_config.API_URL}${id}`);
        const { recipe  } = data.data;
        state.recipe = {
            id: recipe.id,
            cookingTime: recipe.cooking_time,
            image: recipe.image_url,
            ingredients: recipe.ingredients,
            publisher: recipe.publisher,
            servings: recipe.servings,
            url: recipe.source_url,
            title: recipe.title
        };
        if (state.bookmarks.some((bookmark)=>bookmark.id === id
        )) state.recipe.bookmarked = true;
        else state.recipe.bookmarked = false;
    } catch (err) {
        console.error(err);
        throw err;
    }
};
const loadSearchResult = async function(query) {
    try {
        state.search.query = query;
        const data = await _helper.fetchData(`${_config.API_URL}?search=${query}`);
        state.search.results = data.data.recipes.map((rec)=>{
            return {
                id: rec.id,
                image: rec.image_url,
                publisher: rec.publisher,
                title: rec.title
            };
        });
        state.search.resultsPage = 1;
    } catch (err) {
        console.error(err);
        throw err;
    }
};
const getSearchResultsPage = function(page = state.search.resultsPage) {
    state.search.resultsPage = page;
    const start = (page - 1) * state.search.resultsPerPage; //0
    const end = page * state.search.resultsPerPage;
    return state.search.results.slice(start, end);
};
const updateServings = function(newServings) {
    state.recipe.ingredients.forEach((eng)=>{
        //--> NewQty = OldQty * NewServing / OldServing
        eng.quantity = eng.quantity * newServings / state.recipe.servings;
    });
    state.recipe.servings = newServings;
};
const addBookmark = function(recipe) {
    //--> Add Bookmark
    state.bookmarks.push(recipe);
    //--> Mark current recipe as Bookmarked
    if (recipe.id === state.recipe.id) state.recipe.bookmarked = true;
};
const removeBookmark = function(id) {
    const index = state.bookmarks.findIndex((el)=>el.id === id
    );
    state.bookmarks.splice(index, 1);
};
